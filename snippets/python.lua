local ls = require("luasnip")
local s = ls.snippet
local t = ls.text_node
local i = ls.insert_node
local fmt = require("luasnip.extras.fmt").fmt
local rep = require("luasnip.extras").rep

return {
	-- Django Model Patterns
	s("tcmodel", {
		t("class "),
		i(1, "ModelName"),
		t("(TimeStampedModel):"),
		t({ "", "    " }),
		i(2, "# Model fields here"),
		t({ "", "", "    class Meta:", '        db_table = "' }),
		i(3, "table_name"),
		t('"'),
		t({ "", "", '        db_route_condition = "master-only"', "        objects = UdemyQuerySet.as_manager()" }),
	}),
	-- Django Model with Foreign Key
	s("tcfkmodel", {
		t("class "),
		i(1, "ModelName"),
		t("(TimeStampedModel):"),
		t({ "", "    user = models.ForeignKey(" }),
		t({ "", '        "user.User",' }),
		t({ "", "        on_delete=models.CASCADE," }),
		t({ "", '        db_column="userId",' }),
		t({ "", '        related_name="' }),
		i(2, "related_name"),
		t('",'),
		t({ "", "    )" }),
		t({ "", "    " }),
		i(3, "# Additional fields"),
		t({ "", "", "    class Meta:" }),
		t({ "", '        db_table = "' }),
		i(4, "table_name"),
		t('"'),
		t({ "", "", '        db_route_condition = "master-only"' }),
		t({ "", "        objects = UdemyQuerySet.as_manager()" }),
	}),
	-- Celery Task Pattern
	s("tctask", {
		t('@celery_secondary_app.task(garden_queue="tasks.'),
		i(1, "queue-name"),
		t('")'),
		t({ "", '@statsd.timed("tasks.' }),
		i(2, "module_name"),
		t("."),
		i(3, "function_name"),
		t('")'),
		t({ "", "def " }),
		rep(3),
		t("("),
		i(4, "args"),
		t("):"),
		t({ "", '    """' }),
		t({ "", "    " }),
		i(5, "Task description"),
		t({ "", '    """' }),
		t({ "", "    " }),
		i(6, "# Task implementation"),
	}),
	-- API ViewSet Pattern
	s("tcviewset", {
		t("class "),
		i(1, "ViewSetName"),
		t("("),
		t({ "", "    BrandAwareViewMixin," }),
		t({ "", "    " }),
		i(2, "mixins.RetrieveModelMixin"),
		t(","),
		t({ "", "    viewsets.GenericViewSet," }),
		t({ "", "):" }),
		t({ "", "    permission_classes = views.APIView.permission_classes + [" }),
		t({ "", "        " }),
		i(3, "PermissionClass"),
		t(","),
		t({ "", "    ]" }),
		t({ "", "    serializer_class = serializers." }),
		i(4, "SerializerName"),
		t({ "", "    queryset = " }),
		i(5, "Model.objects.all()"),
		t({ "", "", "    def get_queryset(self):" }),
		t({ "", "        " }),
		i(6, "return self.queryset"),
	}),
	-- DRF Serializer Pattern
	s("tcserializer", {
		t("class "),
		i(1, "SerializerName"),
		t("(FieldFilteringSerializer, serializers.ModelSerializer):"),
		t({ "", "    " }),
		i(2, "custom_field"),
		t(" = serializers.SerializerMethodField()"),
		t({ "", "", "    class Meta:" }),
		t({ "", '        min_fields = ("' }),
		i(3, "id"),
		t('", "'),
		i(4, "created"),
		t('")'),
		t({ "", '        default_fields = min_fields + ("' }),
		i(5, "field1"),
		t('", "'),
		i(6, "field2"),
		t('")'),
		t({ "", '        all_fields = default_fields + ("' }),
		rep(2),
		t('",)'),
		t({ "", "        fields = all_fields" }),
		t({ "", "        model = " }),
		i(7, "ModelName"),
		t({ "", "", "    def get_" }),
		rep(2),
		t("(self, obj):"),
		t({ "", "        " }),
		i(8, "return obj.custom_field_value"),
	}),
	-- Test Case Pattern
	s("tctestcase", {
		t("class "),
		i(1, "TestCaseName"),
		t("TestCase(UdemyUnitTestCase):"),
		t({ "", "    def setUp(self):" }),
		t({ "", "        super().setUp()" }),
		t({ "", "        " }),
		i(2, "# Setup code"),
		t({ "", "", "    def test_" }),
		i(3, "test_name"),
		t("(self):"),
		t({ "", "        # Given" }),
		t({ "", "        " }),
		i(4, "# Test setup"),
		t({ "", "", "        # When" }),
		t({ "", "        " }),
		i(5, "# Test action"),
		t({ "", "", "        # Then" }),
		t({ "", "        " }),
		i(6, "# Assertions"),
	}),
	-- Integration Test Pattern
	s("tcintegtest", {
		t("class "),
		i(1, "TestCaseName"),
		t("TestCase(ApiTestCase):"),
		t({ "", "    def setUp(self):" }),
		t({ "", "        super().setUp()" }),
		t({ "", "        self.user = UserFactory()" }),
		t({ "", "        self.client.force_authenticate(user=self.user)" }),
		t({ "", "        " }),
		i(2, "# Additional setup"),
		t({ "", "", "    def test_" }),
		i(3, "test_name"),
		t("(self):"),
		t({ "", "        # Given" }),
		t({ "", '        url = reverse("' }),
		i(4, "url_name"),
		t('")'),
		t({ "", "        data = {" }),
		t({ "", '            "' }),
		i(5, "key"),
		t('": "'),
		i(6, "value"),
		t('"'),
		t({ "", "        }" }),
		t({ "", "", "        # When" }),
		t({ "", "        response = self.client." }),
		i(7, "post"),
		t("(url, data)"),
		t({ "", "", "        # Then" }),
		t({ "", "        self.assertEqual(response.status_code, " }),
		i(8, "200"),
		t(")"),
	}),
	-- Constants File Pattern
	s("tcconstants", {
		i(1, "CONSTANT_NAME"),
		t(' = "'),
		i(2, "constant_value"),
		t('"'),
		t({ "", "" }),
		i(3, "ANOTHER_CONSTANT"),
		t(" = "),
		i(4, "42"),
		t({ "", "" }),
		t("# Redis keys"),
		t({ "", "" }),
		i(5, "REDIS_KEY_PREFIX"),
		t(' = "'),
		i(6, "prefix:key:"),
		t('"'),
	}),
	-- Helper Function Pattern
	s("tchelper", {
		t("def "),
		i(1, "helper_function_name"),
		t("("),
		i(2, "args"),
		t("):"),
		t({ "", '    """' }),
		t({ "", "    " }),
		i(3, "Function description"),
		t({ "", "    " }),
		t({ "", "    Args:" }),
		t({ "", "        " }),
		i(4, "arg_name (type): Description"),
		t({ "", "    " }),
		t({ "", "    Returns:" }),
		t({ "", "        " }),
		i(5, "return_type: Description"),
		t({ "", '    """' }),
		t({ "", "    " }),
		i(6, "# Implementation"),
	}),
	-- Exception Pattern
	s("tcexception", {
		t("class "),
		i(1, "ExceptionName"),
		t("(Exception):"),
		t({ "", '    """' }),
		t({ "", "    " }),
		i(2, "Exception description"),
		t({ "", '    """' }),
		t({ "", "    pass" }),
	}),
	-- Django Signal Handler
	s("tcsignal", {
		t("@receiver("),
		i(1, "post_save"),
		t(", sender="),
		i(2, "ModelName"),
		t(")"),
		t({ "", "def handle_" }),
		i(3, "model_name"),
		t("_"),
		rep(1),
		t("(sender, instance, created, **kwargs):"),
		t({ "", '    """' }),
		t({ "", "    Handle " }),
		rep(1),
		t(" signal for "),
		rep(2),
		t({ "", '    """' }),
		t({ "", "    if created:" }),
		t({ "", "        " }),
		i(4, "# Handle creation"),
		t({ "", "    else:" }),
		t({ "", "        " }),
		i(5, "# Handle update"),
	}),
	-- API URL Pattern
	s("tcurl", {
		t('path("'),
		i(1, "endpoint/"),
		t('", '),
		i(2, "ViewName"),
		t('.as_view(), name="'),
		i(3, "url_name"),
		t('"),'),
	}),
	-- Mock Pattern for Tests
	s("tcmock", {
		t('@patch("'),
		i(1, "module.path.function"),
		t('")'),
		t({ "", "def test_" }),
		i(2, "test_name"),
		t("(self, mock_"),
		i(3, "function"),
		t("):"),
		t({ "", "    # Given" }),
		t({ "", "    mock_" }),
		rep(3),
		t(".return_value = "),
		i(4, "expected_value"),
		t({ "", "    " }),
		i(5, "# Additional setup"),
		t({ "", "", "    # When" }),
		t({ "", "    " }),
		i(6, "# Test action"),
		t({ "", "", "    # Then" }),
		t({ "", "    mock_" }),
		rep(3),
		t(".assert_called_once_with("),
		i(7, "expected_args"),
		t(")"),
	}),
	-- Braze Event Pattern
	s("tcbraze", {
		t("class "),
		i(1, "EventName"),
		t("Event(BaseEvent):"),
		t({ "", '    """' }),
		t({ "", "    " }),
		i(2, "Event description"),
		t({ "", '    """' }),
		t({ "", "    " }),
		t({ "", "    def __init__(self, " }),
		i(3, "user"),
		t(", "),
		i(4, "additional_params"),
		t("):"),
		t({ "", "        super().__init__()" }),
		t({ "", "        self.user = " }),
		rep(3),
		t({ "", "        self." }),
		rep(4),
		t(" = "),
		rep(4),
		t({ "", "", "    def get_event_name(self):" }),
		t({ "", '        return "' }),
		i(5, "event_name"),
		t('"'),
		t({ "", "", "    def get_event_properties(self):" }),
		t({ "", "        return {" }),
		t({ "", '            "' }),
		i(6, "property_key"),
		t('": '),
		i(7, "self.property_value"),
		t(","),
		t({ "", "        }" }),
	}),
	-- Django Admin Pattern
	s("tcadmin", {
		t("@admin.register("),
		i(1, "ModelName"),
		t(")"),
		t({ "", "class " }),
		rep(1),
		t("Admin(admin.ModelAdmin):"),
		t({ "", '    list_display = ("' }),
		i(2, "field1"),
		t('", "'),
		i(3, "field2"),
		t('", "'),
		i(4, "created"),
		t('")'),
		t({ "", '    list_filter = ("' }),
		i(5, "filter_field"),
		t('",)'),
		t({ "", '    search_fields = ("' }),
		i(6, "search_field"),
		t('",)'),
		t({ "", '    readonly_fields = ("' }),
		i(7, "readonly_field"),
		t('",)'),
	}),
	-- Django Management Command
	s("tccommand", {
		t("from django.core.management.base import BaseCommand"),
		t({ "", "" }),
		t("class Command(BaseCommand):"),
		t({ "", '    help = "' }),
		i(1, "Command description"),
		t('"'),
		t({ "", "", "    def add_arguments(self, parser):" }),
		t({ "", '        parser.add_argument("--' }),
		i(2, "option"),
		t('", type=str, help="'),
		i(3, "Option description"),
		t('")'),
		t({ "", "", "    def handle(self, *args, **options):" }),
		t({ "", "        " }),
		i(4, "# Command implementation"),
		t({ "", "        self.stdout.write(" }),
		t({ "", '            self.style.SUCCESS("Successfully executed command")' }),
		t({ "", "        )" }),
	}),
	-- Logger Pattern
	s("tclogger", {
		t("import logging"),
		t({ "", "" }),
		t("logger = logging.getLogger(__name__)"),
		t({ "", "" }),
		t("logger."),
		i(1, "info"),
		t('("'),
		i(2, "Log message"),
		t('")'),
	}),
	-- Factory Pattern for Tests
	s("tcfactory", {
		t("class "),
		i(1, "ModelName"),
		t("Factory(factory.django.DjangoModelFactory):"),
		t({ "", "    class Meta:" }),
		t({ "", "        model = " }),
		rep(1),
		t({ "", "", "    " }),
		i(2, "field_name"),
		t(" = factory."),
		i(3, "Faker"),
		t('("'),
		i(4, "faker_provider"),
		t('")'),
		t({ "", "    " }),
		i(5, "another_field"),
		t(" = "),
		i(6, "factory.SubFactory(RelatedFactory)"),
	}),
}
